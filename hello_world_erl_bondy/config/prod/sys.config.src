[

    {hello_world, []},
    {wamp_client, [
        {routers, #{
            bondy => #{
                hostname => "${WAMP_HOST}",
                port => ${WAMP_PORT},
                %% move on peer
                realm => <<"${WAMP_REALM}">>,
                %% bondy
                encoding => "${WAMP_ENCODING}",
                reconnect => true,
                reconnect_retries => ${WAMP_RECONNECT_RETRIES},
                reconnect_max_retries => ${WAMP_RECONNECT_MAX_RETRIES},
                reconnect_backoff_min => ${WAMP_RECONNECT_BACKOFF_MIN},
                reconnect_backoff_max => ${WAMP_RECONNECT_BACKOFF_MAX},
                reconnect_backoff_type => ${WAMP_RECONNECT_BACKOFF_TYPE}
            }
        }},
        {defaults, #{
            router => bondy,
            caller => #{
                features => #{
                    progressive_call_results => false,
                    progressive_calls => false,
                    call_timeout => true,
                    call_canceling => false,
                    caller_identification=> true,
                    call_retries => true
                },
                options => #{
                    timeout => ${WAMP_CALL_TIMEOUT},
                    disclose_me => true
                }
            },
            callee => #{
                features => #{
                    progressive_call_results => false,
                    progressive_calls => false,
                    call_timeout => true,
                    call_canceling => false,
                    caller_identification => true,
                    call_trustlevels => true,
                    registration_revocation => true,
                    session_meta_api => true,
                    pattern_based_registration => true,
                    shared_registration => true,
                    sharded_registration => true
                },
                options => #{
                    disclose_caller => true,
                    invoke => roundrobin
                }
            },
            publisher => #{
                features => #{
                    message_retention => true,
                    publisher_exclusion => true,
                    publisher_identification => true,
                    subscriber_blackwhite_listing => true
                }
            },
            subscriber => #{
                features => #{
                    event_history => false,
                    pattern_based_subscription => true,
                    publication_trustlevels => true,
                    publisher_identification => true,
                    sharded_subscription => true
                }
            }
        }},
        {peers, #{
            default => #{
                router => bondy,
                pool_size => 3,
                pool_type => hash,
                roles => #{
                    caller => #{},
                    publisher => #{},
                    callee => #{
                        features => #{},
                        registrations => #{
                            <<"com.bondy.demo.hello.sayhello">> => #{
                                options => #{disclose_caller => true,invoke => roundrobin},
                                handler =>  {hello_wamp, say_hi}
                            }
                        }
                    },
                    subscriber => #{
                        features => #{},
                        subscriptions => #{
%                             <<"com.bondy.demo.hello.onhello">> => #{
%                                 handler => {hello_wamp, on_hello}
%                             }
                        }
                    }
                }
            }
        }}
    ]},

    {awre, [
        {erlbin_number, 15},
        {agent, hello_world}
    ]},

    {lager, [
        %% Default handlers for lager/lager_event
        {colored, true},
        {async_threshold, 500},
        {async_threshold_window, 50},
        {error_logger_hwm, 50},
        {handlers, [
            {lager_console_backend, [
                {level, ${LOG_LEVEL}},
                {formatter, lager_default_formatter},
                {formatter_config, [
                    color,
                    date, " ", time,
                    " [", severity,"]",
                    " [", pid, " ", module,":",function,":",line,"] ",
                    message,
                    "\e[0m\r\n"
                ]}
            ]}
        ]},
        {extra_sinks, [
            {notifications_log_lager_event, [
                {handlers, [
                    {lager_console_backend, [
                        {level, ${LOG_LEVEL}},
                        {formatter, lager_default_formatter},
                        {formatter_config, [
                            color,
                            date, " ", time,
                            " [", severity,"]",
                            " [", pid, " ", module,":",function,":",line,"] ",
                            message,
                            "\e[0m\r\n"
                        ]}
                    ]}
                ]}
            ]},
            {error_logger_lager_event, [
                {handlers, [
                    {lager_console_backend, [
                        {level, ${LOG_LEVEL}},
                        {formatter, lager_default_formatter},
                        {formatter_config, [
                            date, " ", time,
                            " [", severity,"]",
                            " [", pid, " ", module,":",function,":",line,"] ",
                            message,
                            "\r\n"
                        ]}
                    ]}
                ]}
            ]}
        ]}
    ]},

    {kernel, [
        {logger, [
            {handler, default, logger_std_h, #{
                level => ${LOG_LEVEL},
                formatter => {
                    logger_formatter, #{
                        template => [
                            time,
                            " [", level, "]",
                            " [", pid, " ", moderlule,":", function,":", line, "] ",
                            msg,
                            "\r\n"
                        ]
                    }
                }
            }}
        ]}
    ]}

].

